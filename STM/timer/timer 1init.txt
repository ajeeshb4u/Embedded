/***********************************Timer1 Init*****************************************************/
  if (__TIMER_USED & 0x01) {                                // TIM1 used
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;                     // enable clock for TIM1

    TIM1->PSC = __PSC(__TIM1CLK, __TIM1_PERIOD);            // set prescaler
    TIM1->ARR = __ARR(__TIM1CLK, __TIM1_PERIOD);            // set auto-reload
    TIM1->RCR = __TIM1_RCR;                                 // set repetition counter

    TIM1->CR1 = 0;                                          // reset command register 1
    TIM1->CR2 = 0;                                          // reset command register 2

    if (__TIMER_DETAILS & 0x01) {                           // detailed settings used
      TIM1->PSC = __TIM1_PSC;                               // set prescaler
      TIM1->ARR = __TIM1_ARR;                               // set auto-reload

      TIM1->CCR1  = __TIM1_CCR1;                            //
      TIM1->CCR2  = __TIM1_CCR2;                            //
      TIM1->CCR3  = __TIM1_CCR3;                            //
      TIM1->CCR4  = __TIM1_CCR4;                            //
      TIM1->CCMR1 = __TIM1_CCMR1;                           //
      TIM1->CCMR2 = __TIM1_CCMR2;                           //
      TIM1->CCER  = __TIM1_CCER;                            // set capture/compare enable register
      TIM1->SMCR  = __TIM1_SMCR;                            // set slave mode control register

      TIM1->CR1 = __TIM1_CR1;                               // set command register 1
      TIM1->CR2 = __TIM1_CR2;                               // set command register 2
    }

    if (__TIMER_INTERRUPTS & 0x01) {                        // interrupts used
      TIM1->DIER = __TIM1_DIER;                             // enable interrupt
      NVIC->ISER[0] |= (1 << (TIM1_UP_IRQChannel & 0x1F));  // enable interrupt
    }

    TIM1->CR1 |= TIMX_CR1_CEN;                              // enable timer
  } // end TIM1 used


/**************************************NVIC Reg*********************************************/

#if __NVIC_SETUP
/*----------------------------------------------------------------------------
 STM32 NVIC setup.
 initializes the NVIC register
 *----------------------------------------------------------------------------*/
__inline static void stm32_NvicSetup (void) {

  if (__NVIC_USED & (1 << 0)) {                              // Vector Table Offset Register
    SCB->VTOR = (__NVIC_VTOR_VAL & (u32)0x3FFFFF80);         // set register
  }

} // end of stm32_NvicSetup
#endif

/****************************************clk init********************************************/

#if __CLOCK_SETUP
/*----------------------------------------------------------------------------
 STM32 clock setup.
 initializes the RCC register
 *----------------------------------------------------------------------------*/
__inline static void stm32_ClockSetup (void) {
  /* Clock Configuration*/

  RCC->CFGR = __RCC_CFGR_VAL;                        // set clock configuration register
  RCC->CR   = __RCC_CR_VAL;                          // set clock control register

  if (__RCC_CR_VAL & RCC_CR_HSION) {                 // if HSI enabled
    while ((RCC->CR & RCC_CR_HSIRDY) == 0);          // Wait for HSIRDY = 1 (HSI is ready)
  }

  if (__RCC_CR_VAL & RCC_CR_HSEON) {                 // if HSE enabled
    while ((RCC->CR & RCC_CR_HSERDY) == 0);          // Wait for HSERDY = 1 (HSE is ready)
  }

  if (__RCC_CR_VAL & RCC_CR_PLLON) {                 // if PLL enabled
    while ((RCC->CR & RCC_CR_PLLRDY) == 0);          // Wait for PLLRDY = 1 (PLL is ready)
  }

  /* Wait till SYSCLK is stabilized (depending on selected clock) */
  while ((RCC->CFGR & RCC_CFGR_SWS) != ((__RCC_CFGR_VAL<<2) & RCC_CFGR_SWS));
} // end of stm32_ClockSetup
#endif


/***************************************sys timer int*******************************/

#if __SYSTICK_SETUP
/*----------------------------------------------------------------------------
 STM32 System Timer setup.
 initializes the SysTick register
 *----------------------------------------------------------------------------*/
__inline static void stm32_SysTickSetup (void) {

#if ((__SYSTICK_PERIOD*(__SYSTICKCLK/1000)-1) > 0xFFFFFF)       // reload value to large
   #error "Reload Value to large! Please use 'HCLK/8' as System Timer clock source or smaller period"
#else
  SysTick->LOAD  = __SYSTICK_PERIOD*(__SYSTICKCLK/1000)-1;      // set reload register
  SysTick->CTRL  = __SYSTICK_CTRL_VAL;                          // set clock source and Interrupt enable

  SysTick->VAL   =  0;                                          // clear  the counter
  SysTick->CTRL |= SYSTICK_CSR_ENABLE;                          // enable the counter
#endif
} // end of stm32_SysTickSetup
#endif

/****************************************AFIO init************************************/

#if __AFREMAP_SETUP
/*----------------------------------------------------------------------------
 STM32 AF remap setup.
 initializes the AFIO_MAPR register
 *----------------------------------------------------------------------------*/
__inline static void stm32_AfRemapSetup (void) {
                                                    
  if (__AFIO_MAPR & (1 << 0)) {                             // SPI1 remap used 

    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                     // enable clock for Alternate Function
    AFIO->MAPR &= ~(1 << 0);                                // clear used bit
    AFIO->MAPR |= ((1 << 0) & __AFIO_MAPR);                 // set used bits
  } // end SPI1 remap used

  if (__AFIO_MAPR & (1 << 1)) {                             // I2C1 remap used 

    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                     // enable clock for Alternate Function
    AFIO->MAPR &= ~(1 << 1);                                // clear used bit
    AFIO->MAPR |= ((1 << 1) & __AFIO_MAPR);                 // set used bits
  } // end I2C1 remap used

  if (__AFIO_MAPR & (1 << 2)) {                             // USART1 remap used 

    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                     // enable clock for Alternate Function
    AFIO->MAPR &= ~(1 << 2);                                // clear used bit
    AFIO->MAPR |= ((1 << 2) & __AFIO_MAPR);                 // set used bits
  } // end USART1 remap used

  if (__AFIO_MAPR & (1 << 3)) {                             // USART2 remap used 

    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                     // enable clock for Alternate Function
    AFIO->MAPR &= ~(1 << 3);                                // clear used bit
    AFIO->MAPR |= ((1 << 3) & __AFIO_MAPR);                 // set used bits
  } // end USART2 remap used

  if (__AFIO_MAPR & (3 << 4)) {                             // USART3 remap used 

    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                     // enable clock for Alternate Function
    AFIO->MAPR &= ~(3 << 4);                                // clear used bit
    AFIO->MAPR |= ((3 << 4) & __AFIO_MAPR);                 // set used bits
  } // end USART3 remap used

  if (__AFIO_MAPR & (3 << 6)) {                             // TIM1 remap used 

    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                     // enable clock for Alternate Function
    AFIO->MAPR &= ~(3 << 6);                                // clear used bit
    AFIO->MAPR |= ((3 << 6) & __AFIO_MAPR);                 // set used bits
  } // end TIM1 remap used

  if (__AFIO_MAPR & (3 << 8)) {                             // TIM2 remap used 

    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                     // enable clock for Alternate Function
    AFIO->MAPR &= ~(3 << 8);                                // clear used bit
    AFIO->MAPR |= ((3 << 8) & __AFIO_MAPR);                 // set used bits
  } // end TIM2 remap used

  if (__AFIO_MAPR & (3 << 10)) {                            // TIM3 remap used 

    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                     // enable clock for Alternate Function
    AFIO->MAPR &= ~(3 << 10);                               // clear used bit
    AFIO->MAPR |= ((3 << 10) & __AFIO_MAPR);                // set used bits
  } // end TIM3 remap used

  if (__AFIO_MAPR & (1 << 12)) {                            // TIM4 remap used 

    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                     // enable clock for Alternate Function
    AFIO->MAPR &= ~(1 << 12);                               // clear used bit
    AFIO->MAPR |= ((1 << 12) & __AFIO_MAPR);                // set used bits
  } // end TIM2 remap used

  if (__AFIO_MAPR & (3 << 13)) {                            // CAN remap used 

    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                     // enable clock for Alternate Function
    AFIO->MAPR &= ~(3 << 13);                               // clear used bit
    AFIO->MAPR |= ((3 << 13) & __AFIO_MAPR);                // set used bits
  } // end TIM2 remap used

  if (__AFIO_MAPR & (1 << 15)) {                            // PD01 remap used 

    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;                     // enable clock for Alternate Function
    AFIO->MAPR &= ~(1 << 15);                               // clear used bit
    AFIO->MAPR |= ((1 << 15) & __AFIO_MAPR);                // set used bits
  } // end TIM2 remap used

} // end of stm32_AfRemapSetup
#endif

/***************************************************************************************************************/